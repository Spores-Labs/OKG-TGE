{
  "address": "0x7720fdb1b98846359bF26E3dA7D1B55063bf947D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_totalAmt",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_policies",
          "type": "uint256[]"
        }
      ],
      "name": "addBeneficiaries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policy",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "policy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beneficiariesList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getAvailAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getTotalAllocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TGEratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TGEdenom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TGEtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPeriodNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_TGEratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_TGEdenom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_TGEtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67ed286e20e164ab79c6dc19582d3e9b0656b41b24423646c7498450b963ca97",
  "receipt": {
    "to": null,
    "from": "0xd3681CEe794f3a75415ffB7294730e5EA4042f7A",
    "contractAddress": "0x7720fdb1b98846359bF26E3dA7D1B55063bf947D",
    "transactionIndex": 5,
    "gasUsed": "2340777",
    "logsBloom": "0x
    "blockHash": "0x8981950b96a925fb14f9fae9bcc9c7037483380841f7ff95825d6321793b5e8f",
    "transactionHash": "0x67ed286e20e164ab79c6dc19582d3e9b0656b41b24423646c7498450b963ca97",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 26257424,
        "transactionHash": "0x67ed286e20e164ab79c6dc19582d3e9b0656b41b24423646c7498450b963ca97",
        "address": "0x7720fdb1b98846359bF26E3dA7D1B55063bf947D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3681cee794f3a75415ffb7294730e5ea4042f7a"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x8981950b96a925fb14f9fae9bcc9c7037483380841f7ff95825d6321793b5e8f"
      }
    ],
    "blockNumber": 26257424,
    "cumulativeGasUsed": "2908100",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7758a52c1Bb823d02878B67aD87B6bA37a0CDbF5"
  ],
  "numDeployments": 1,
  "solcInputHash": "f719b653e544565b9f80594e3543f400",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalAmt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_policies\",\"type\":\"uint256[]\"}],\"name\":\"addBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policy\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"policy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiariesList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TGEratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TGEdenom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TGEtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriodNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TGEratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TGEdenom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TGEtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBeneficiaries(address[],uint256[],uint256[])\":{\"details\":\"Caller must be Owner Not allow Owner to alter the vesting policy\",\"params\":{\"_beneficiaries\":\"all `_beneficiaries` address\",\"_totalAmt\":\"Amount that corresponding `_beneficiary` can claim in total \"}},\"addBeneficiary(address,uint256,uint256)\":{\"details\":\"Caller must be Owner Not allow Owner to alter the vesting policy\",\"params\":{\"_beneficiary\":\"`_beneficiary` address\",\"_policy\":\"index of the correspond policy for beneficiary\",\"_totalAmt\":\"Amount that `_beneficiary` can claim in total\"}},\"claim()\":{\"details\":\"Caller can be any Note:  - Only Beneficiaries, who were added into the list, are able to claim tokens - If `_policy`, that binds to msg.sender, is not found -> revert - Previously unclaimed amounts will be accumulated\"},\"getAvailAmt(address)\":{\"details\":\"Caller can be ANY\"},\"lock()\":{\"details\":\"Caller must be Owner Note: - Set value of `locked` to `true` - When `locked = true`, setVesting() will be locked and additional vesting policies can't be added - No method to unlock this state\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release()\":{\"details\":\"Caller can be owner only\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPolicy(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_TGEdenom\":\"denominator of `_TGEratio`\",\"_TGEratio\":\"amount to release on TGE in `_TGEdenom` of total allocated\",\"_TGEtime\":\"moment of TGE\",\"_period\":\"duration of an vesting period\",\"_vestingEnd\":\"last of vesting time, return last vesting on this timestamp\",\"_vestingStart\":\"moment of vesting duration start\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Caller can be owner only\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBeneficiaries(address[],uint256[],uint256[])\":{\"notice\":\"add multiple beneficiaries\"},\"addBeneficiary(address,uint256,uint256)\":{\"notice\":\"add beneficiary\"},\"claim()\":{\"notice\":\"Beneficiaries use this method to claim vesting tokens\"},\"getAvailAmt(address)\":{\"notice\":\"Query available amount that `_beneficiary` is able to claim at the moment\"},\"lock()\":{\"notice\":\"Enable the lock state of setting\"},\"release()\":{\"notice\":\"Owner call this to realease token to all beneficiaries\"},\"setPolicy(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Set policy and vesting timeline\"},\"withdraw()\":{\"notice\":\"Owner call this to withdraw all vesting token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PeriodicVesting.sol\":\"PeriodicVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVesting {\\n    function claimed(address _beneficiary) external view returns (uint256);\\n\\n    function getAvailAmt(address _beneficiary) external view returns (uint256);\\n\\n    function claim() external;\\n\\n    function getTotalAllocated(address _beneficiary)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function release() external;\\n}\\n\",\"keccak256\":\"0x68a8224dbc1fa2107e1a8655739122a53e6348664cd4a83635678e96febd45ec\",\"license\":\"MIT\"},\"contracts/PeriodicVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\n\\ncontract PeriodicVesting is Ownable, ReentrancyGuard, IVesting {\\n    using SafeERC20 for IERC20;\\n\\n    struct PoolPolicy {\\n        uint256 TGEratio;\\n        uint256 TGEdenom;\\n        uint256 TGEtime;\\n        uint256 vestingStart;\\n        uint256 vestingEnd;\\n        uint256 period;\\n        uint256 totalPeriodNum;\\n    }\\n\\n    struct Beneficiary {\\n        uint256 allocated;\\n        uint256 claimed;\\n        uint256 policy;\\n    }\\n\\n    IERC20 public token;\\n\\n    bool public locked;\\n    PoolPolicy[] public policies;\\n\\n    address[] public beneficiariesList;\\n    mapping(address => Beneficiary) public beneficiaries;\\n\\n    event Released(\\n        address indexed beneficiary,\\n        uint256 currentTime,\\n        uint256 amount\\n    );\\n\\n    modifier isNotLocked() {\\n        require(!locked, \\\"Locked already\\\");\\n        _;\\n    }\\n\\n    modifier zeroAddr(address _addr) {\\n        require(_addr != address(0), \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    constructor(address _token) Ownable() {\\n        require(_token != address(0), \\\"Address must not be zero\\\");\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n        @notice Set policy and vesting timeline\\n        @param _TGEratio amount to release on TGE in `_TGEdenom` of total allocated\\n        @param _TGEdenom denominator of `_TGEratio`\\n        @param _TGEtime moment of TGE\\n        @param _vestingStart moment of vesting duration start\\n        @param _vestingEnd last of vesting time, return last vesting on this timestamp\\n        @param _period duration of an vesting period\\n     */\\n    function setPolicy(\\n        uint256 _TGEratio,\\n        uint256 _TGEdenom,\\n        uint256 _TGEtime,\\n        uint256 _vestingStart,\\n        uint256 _vestingEnd,\\n        uint256 _period\\n    ) external onlyOwner isNotLocked {\\n        require(\\n            (_vestingEnd - _vestingStart) % _period == 0,\\n            \\\"Vesting timeline invalid\\\"\\n        );\\n\\n        require(_vestingStart > _TGEtime, \\\"Vesting must start after TGE\\\");\\n        uint256 _totalPeriodNum = (_vestingEnd - _vestingStart) / _period + 1;\\n        policies.push(\\n            PoolPolicy(\\n                _TGEratio,\\n                _TGEdenom,\\n                _TGEtime,\\n                _vestingStart,\\n                _vestingEnd,\\n                _period,\\n                _totalPeriodNum\\n            )\\n        );\\n    }\\n\\n    function getTotalAllocated(address _beneficiary)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return beneficiaries[_beneficiary].allocated;\\n    }\\n\\n    /**\\n        @notice Enable the lock state of setting\\n        @dev Caller must be Owner\\n        Note:\\n        - Set value of `locked` to `true`\\n        - When `locked = true`, setVesting() will be locked\\n        and additional vesting policies can't be added\\n        - No method to unlock this state\\n    */\\n    function lock() external onlyOwner isNotLocked {\\n        locked = true;\\n    }\\n\\n    /**\\n        @notice add beneficiary\\n        @dev Caller must be Owner\\n        Not allow Owner to alter the vesting policy\\n        @param _beneficiary `_beneficiary` address\\n        @param _totalAmt Amount that `_beneficiary` can claim in total\\n        @param _policy index of the correspond policy for beneficiary\\n    */\\n    function addBeneficiary(\\n        address _beneficiary,\\n        uint256 _totalAmt,\\n        uint256 _policy\\n    ) public onlyOwner isNotLocked zeroAddr(_beneficiary) {\\n        require(_policy < policies.length, \\\"Policy not existed\\\");\\n        require(beneficiaries[_beneficiary].allocated == 0, \\\"Already added\\\");\\n        beneficiaries[_beneficiary] = Beneficiary(_totalAmt, 0, _policy);\\n\\n        beneficiariesList.push(_beneficiary);\\n    }\\n\\n    /**\\n        @notice add multiple beneficiaries\\n        @dev Caller must be Owner\\n        Not allow Owner to alter the vesting policy\\n        @param _beneficiaries all `_beneficiaries` address\\n        @param _totalAmt Amount that corresponding `_beneficiary` can claim in total \\n    */\\n    function addBeneficiaries(\\n        address[] calldata _beneficiaries,\\n        uint256[] calldata _totalAmt,\\n        uint256[] calldata _policies\\n    ) external onlyOwner isNotLocked {\\n        require(\\n            _beneficiaries.length == _totalAmt.length,\\n            \\\"Invalid array length\\\"\\n        );\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\n            addBeneficiary(_beneficiaries[i], _totalAmt[i], _policies[i]);\\n        }\\n    }\\n\\n    /**\\n        @notice Query available amount that `_beneficiary` is able to claim at the moment\\n        @dev Caller can be ANY\\n    */\\n    function getAvailAmt(address _beneficiary)\\n        public\\n        view\\n        override\\n        returns (uint256 _amount)\\n    {\\n        Beneficiary memory _bene = beneficiaries[_beneficiary];\\n        PoolPolicy memory _policy = policies[_bene.policy];\\n        uint256 tgeAmnt = (_bene.allocated * _policy.TGEratio) /\\n            _policy.TGEdenom;\\n        if (block.timestamp > _policy.TGEtime) {\\n            _amount += tgeAmnt;\\n        }\\n\\n        if (\\n            block.timestamp < _policy.vestingEnd &&\\n            block.timestamp > _policy.vestingStart\\n        ) {\\n            uint256 numberPeriod = (block.timestamp - _policy.vestingStart) /\\n                _policy.period +\\n                1;\\n            _amount +=\\n                (numberPeriod * (_bene.allocated - tgeAmnt)) /\\n                _policy.totalPeriodNum;\\n        } else if (block.timestamp >= _policy.vestingEnd) {\\n            _amount = _bene.allocated;\\n        }\\n\\n        _amount -= _bene.claimed;\\n    }\\n\\n    function claimed(address _beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return beneficiaries[_beneficiary].claimed;\\n    }\\n\\n    /**\\n        @notice Beneficiaries use this method to claim vesting tokens\\n        @dev Caller can be any\\n        Note: \\n        - Only Beneficiaries, who were added into the list, are able to claim tokens\\n        - If `_policy`, that binds to msg.sender, is not found -> revert\\n        - Previously unclaimed amounts will be accumulated\\n    */\\n    function claim() external override nonReentrant {\\n        claim(_msgSender());\\n    }\\n\\n    function claim(address _beneficiary) internal {\\n        require(\\n            beneficiaries[_beneficiary].allocated != 0,\\n            \\\"Beneficiary not existed\\\"\\n        );\\n\\n        uint256 _amount = getAvailAmt(_beneficiary);\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        beneficiaries[_beneficiary].claimed += _amount;\\n        _releaseTokenTo(_beneficiary, block.timestamp, _amount);\\n    }\\n\\n    /**\\n        @notice Owner call this to realease token to all beneficiaries\\n        @dev Caller can be owner only\\n    */\\n    function release() external override nonReentrant onlyOwner {\\n        for (uint256 i = 0; i < beneficiariesList.length; i++) {\\n            claim(beneficiariesList[i]);\\n        }\\n    }\\n\\n    /**\\n        @notice Owner call this to withdraw all vesting token\\n        @dev Caller can be owner only\\n    */\\n    function withdraw() external onlyOwner {\\n        uint256 bal = token.balanceOf(address(this));\\n        token.safeTransfer(_msgSender(), bal);\\n    }\\n\\n    function _releaseTokenTo(\\n        address _beneficiary,\\n        uint256 _now,\\n        uint256 _amount\\n    ) private {\\n        token.safeTransfer(_beneficiary, _amount);\\n\\n        emit Released(_beneficiary, _now, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2d66f2cdff2ecf5faccb3781eab8105296bec1db8247126f23d3fb24fd29bd65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b4c38038062002b4c83398181016040528101906200003791906200024e565b620000576200004b6200011860201b60201c565b6200012060201b60201c565b60018081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c790620002e1565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000303565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021682620001e9565b9050919050565b620002288162000209565b81146200023457600080fd5b50565b60008151905062000248816200021d565b92915050565b600060208284031215620002675762000266620001e4565b5b6000620002778482850162000237565b91505092915050565b600082825260208201905092915050565b7f41646472657373206d757374206e6f74206265207a65726f0000000000000000600082015250565b6000620002c960188362000280565b9150620002d68262000291565b602082019050919050565b60006020820190508181036000830152620002fc81620002ba565b9050919050565b61283980620003136000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063b4d6abbf116100a2578063e2177df811610071578063e2177df8146102c3578063f2fde38b146102df578063f74bc9d6146102fb578063f83d08ba14610317578063fc0c546a1461032157610116565b8063b4d6abbf1461020f578063c884ef831461023f578063cf3090121461026f578063d3e894831461028d57610116565b8063534b01c6116100e9578063534b01c61461017d5780635f1fa8c0146101ad578063715018a6146101dd57806386d1a69f146101e75780638da5cb5b146101f157610116565b8063015677391461011b5780633ccfd60b1461014d5780634a997eeb146101575780634e71d92d14610173575b600080fd5b610135600480360381019061013091906118ff565b61033f565b60405161014493929190611945565b60405180910390f35b610155610369565b005b610171600480360381019061016c9190611a37565b6104dc565b005b61017b61067e565b005b610197600480360381019061019291906118ff565b6106e4565b6040516101a49190611aeb565b60405180910390f35b6101c760048036038101906101c29190611b32565b610730565b6040516101d49190611b6e565b60405180910390f35b6101e561076f565b005b6101ef6107f7565b005b6101f9610934565b6040516102069190611b6e565b60405180910390f35b610229600480360381019061022491906118ff565b61095d565b6040516102369190611aeb565b60405180910390f35b610259600480360381019061025491906118ff565b610b3c565b6040516102669190611aeb565b60405180910390f35b610277610b88565b6040516102849190611ba4565b60405180910390f35b6102a760048036038101906102a29190611b32565b610b9b565b6040516102ba9796959493929190611bbf565b60405180910390f35b6102dd60048036038101906102d89190611c2e565b610bed565b005b6102f960048036038101906102f491906118ff565b610e2a565b005b61031560048036038101906103109190611cbb565b610f21565b005b61031f61120e565b005b6103296112f7565b6040516103369190611d6d565b60405180910390f35b60056020528060005260406000206000915090508060000154908060010154908060020154905083565b61037161131d565b73ffffffffffffffffffffffffffffffffffffffff1661038f610934565b73ffffffffffffffffffffffffffffffffffffffff16146103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc90611de5565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104429190611b6e565b602060405180830381865afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190611e1a565b90506104d961049061131d565b82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113259092919063ffffffff16565b50565b6104e461131d565b73ffffffffffffffffffffffffffffffffffffffff16610502610934565b73ffffffffffffffffffffffffffffffffffffffff1614610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054f90611de5565b60405180910390fd5b600260149054906101000a900460ff16156105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90611e93565b60405180910390fd5b8383905086869050146105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e790611eff565b60405180910390fd5b60005b868690508110156106755761066287878381811061061457610613611f1f565b5b905060200201602081019061062991906118ff565b86868481811061063c5761063b611f1f565b5b9050602002013585858581811061065657610655611f1f565b5b90506020020135610f21565b808061066d90611f7d565b9150506105f3565b50505050505050565b6002600154036106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90612011565b60405180910390fd5b60026001819055506106db6106d661131d565b6113ab565b60018081905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6004818154811061074057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61077761131d565b73ffffffffffffffffffffffffffffffffffffffff16610795610934565b73ffffffffffffffffffffffffffffffffffffffff16146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290611de5565b60405180910390fd5b6107f560006114b4565b565b60026001540361083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390612011565b60405180910390fd5b600260018190555061084c61131d565b73ffffffffffffffffffffffffffffffffffffffff1661086a610934565b73ffffffffffffffffffffffffffffffffffffffff16146108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790611de5565b60405180910390fd5b60005b60048054905081101561092a57610917600482815481106108e7576108e6611f1f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113ab565b808061092290611f7d565b9150506108c3565b5060018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600060038260400151815481106109e4576109e3611f1f565b5b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816020015182600001518460000151610a609190612031565b610a6a91906120ba565b90508160400151421115610a87578084610a8491906120eb565b93505b816080015142108015610a9d5750816060015142115b15610b0e57600060018360a00151846060015142610abb9190612141565b610ac591906120ba565b610acf91906120eb565b90508260c00151828560000151610ae69190612141565b82610af19190612031565b610afb91906120ba565b85610b0691906120eb565b945050610b22565b81608001514210610b2157826000015193505b5b826020015184610b329190612141565b9350505050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600260149054906101000a900460ff1681565b60038181548110610bab57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b610bf561131d565b73ffffffffffffffffffffffffffffffffffffffff16610c13610934565b73ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6090611de5565b60405180910390fd5b600260149054906101000a900460ff1615610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611e93565b60405180910390fd5b6000818484610cc89190612141565b610cd29190612175565b14610d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d09906121f2565b60405180910390fd5b838311610d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4b9061225e565b60405180910390fd5b60006001828585610d659190612141565b610d6f91906120ba565b610d7991906120eb565b905060036040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001838152509080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505050505050505050565b610e3261131d565b73ffffffffffffffffffffffffffffffffffffffff16610e50610934565b73ffffffffffffffffffffffffffffffffffffffff1614610ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9d90611de5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906122f0565b60405180910390fd5b610f1e816114b4565b50565b610f2961131d565b73ffffffffffffffffffffffffffffffffffffffff16610f47610934565b73ffffffffffffffffffffffffffffffffffffffff1614610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490611de5565b60405180910390fd5b600260149054906101000a900460ff1615610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe490611e93565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361105d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110549061235c565b60405180910390fd5b60038054905082106110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906123c8565b60405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112090612434565b60405180910390fd5b60405180606001604052808481526020016000815260200183815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506004849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61121661131d565b73ffffffffffffffffffffffffffffffffffffffff16611234610934565b73ffffffffffffffffffffffffffffffffffffffff161461128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128190611de5565b60405180910390fd5b600260149054906101000a900460ff16156112da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d190611e93565b60405180910390fd5b6001600260146101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6113a68363a9059cbb60e01b8484604051602401611344929190612454565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611578565b505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403611430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611427906124c9565b60405180910390fd5b600061143b8261095d565b90506000810361144b57506114b1565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461149d91906120eb565b925050819055506114af82428361163f565b505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006115da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116e19092919063ffffffff16565b905060008151111561163a57808060200190518101906115fa9190612515565b611639576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611630906125b4565b60405180910390fd5b5b505050565b61168c8382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113259092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f82e416ba72d10e709b5de7ac16f5f49ff1d94f22d55bf582d353d3c313a1e8dd83836040516116d49291906125d4565b60405180910390a2505050565b60606116f084846000856116f9565b90509392505050565b60608247101561173e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117359061266f565b60405180910390fd5b6117478561180d565b611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d906126db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117af9190612775565b60006040518083038185875af1925050503d80600081146117ec576040519150601f19603f3d011682016040523d82523d6000602084013e6117f1565b606091505b5091509150611801828286611830565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561184057829050611890565b6000835111156118535782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188791906127e1565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118cc826118a1565b9050919050565b6118dc816118c1565b81146118e757600080fd5b50565b6000813590506118f9816118d3565b92915050565b60006020828403121561191557611914611897565b5b6000611923848285016118ea565b91505092915050565b6000819050919050565b61193f8161192c565b82525050565b600060608201905061195a6000830186611936565b6119676020830185611936565b6119746040830184611936565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119a1576119a061197c565b5b8235905067ffffffffffffffff8111156119be576119bd611981565b5b6020830191508360208202830111156119da576119d9611986565b5b9250929050565b60008083601f8401126119f7576119f661197c565b5b8235905067ffffffffffffffff811115611a1457611a13611981565b5b602083019150836020820283011115611a3057611a2f611986565b5b9250929050565b60008060008060008060608789031215611a5457611a53611897565b5b600087013567ffffffffffffffff811115611a7257611a7161189c565b5b611a7e89828a0161198b565b9650965050602087013567ffffffffffffffff811115611aa157611aa061189c565b5b611aad89828a016119e1565b9450945050604087013567ffffffffffffffff811115611ad057611acf61189c565b5b611adc89828a016119e1565b92509250509295509295509295565b6000602082019050611b006000830184611936565b92915050565b611b0f8161192c565b8114611b1a57600080fd5b50565b600081359050611b2c81611b06565b92915050565b600060208284031215611b4857611b47611897565b5b6000611b5684828501611b1d565b91505092915050565b611b68816118c1565b82525050565b6000602082019050611b836000830184611b5f565b92915050565b60008115159050919050565b611b9e81611b89565b82525050565b6000602082019050611bb96000830184611b95565b92915050565b600060e082019050611bd4600083018a611936565b611be16020830189611936565b611bee6040830188611936565b611bfb6060830187611936565b611c086080830186611936565b611c1560a0830185611936565b611c2260c0830184611936565b98975050505050505050565b60008060008060008060c08789031215611c4b57611c4a611897565b5b6000611c5989828a01611b1d565b9650506020611c6a89828a01611b1d565b9550506040611c7b89828a01611b1d565b9450506060611c8c89828a01611b1d565b9350506080611c9d89828a01611b1d565b92505060a0611cae89828a01611b1d565b9150509295509295509295565b600080600060608486031215611cd457611cd3611897565b5b6000611ce2868287016118ea565b9350506020611cf386828701611b1d565b9250506040611d0486828701611b1d565b9150509250925092565b6000819050919050565b6000611d33611d2e611d29846118a1565b611d0e565b6118a1565b9050919050565b6000611d4582611d18565b9050919050565b6000611d5782611d3a565b9050919050565b611d6781611d4c565b82525050565b6000602082019050611d826000830184611d5e565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611dcf602083611d88565b9150611dda82611d99565b602082019050919050565b60006020820190508181036000830152611dfe81611dc2565b9050919050565b600081519050611e1481611b06565b92915050565b600060208284031215611e3057611e2f611897565b5b6000611e3e84828501611e05565b91505092915050565b7f4c6f636b656420616c7265616479000000000000000000000000000000000000600082015250565b6000611e7d600e83611d88565b9150611e8882611e47565b602082019050919050565b60006020820190508181036000830152611eac81611e70565b9050919050565b7f496e76616c6964206172726179206c656e677468000000000000000000000000600082015250565b6000611ee9601483611d88565b9150611ef482611eb3565b602082019050919050565b60006020820190508181036000830152611f1881611edc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f888261192c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611fba57611fb9611f4e565b5b600182019050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611ffb601f83611d88565b915061200682611fc5565b602082019050919050565b6000602082019050818103600083015261202a81611fee565b9050919050565b600061203c8261192c565b91506120478361192c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120805761207f611f4e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120c58261192c565b91506120d08361192c565b9250826120e0576120df61208b565b5b828204905092915050565b60006120f68261192c565b91506121018361192c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561213657612135611f4e565b5b828201905092915050565b600061214c8261192c565b91506121578361192c565b92508282101561216a57612169611f4e565b5b828203905092915050565b60006121808261192c565b915061218b8361192c565b92508261219b5761219a61208b565b5b828206905092915050565b7f56657374696e672074696d656c696e6520696e76616c69640000000000000000600082015250565b60006121dc601883611d88565b91506121e7826121a6565b602082019050919050565b6000602082019050818103600083015261220b816121cf565b9050919050565b7f56657374696e67206d7573742073746172742061667465722054474500000000600082015250565b6000612248601c83611d88565b915061225382612212565b602082019050919050565b600060208201905081810360008301526122778161223b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122da602683611d88565b91506122e58261227e565b604082019050919050565b60006020820190508181036000830152612309816122cd565b9050919050565b7f41646472657373206d757374206e6f74206265207a65726f0000000000000000600082015250565b6000612346601883611d88565b915061235182612310565b602082019050919050565b6000602082019050818103600083015261237581612339565b9050919050565b7f506f6c696379206e6f7420657869737465640000000000000000000000000000600082015250565b60006123b2601283611d88565b91506123bd8261237c565b602082019050919050565b600060208201905081810360008301526123e1816123a5565b9050919050565b7f416c726561647920616464656400000000000000000000000000000000000000600082015250565b600061241e600d83611d88565b9150612429826123e8565b602082019050919050565b6000602082019050818103600083015261244d81612411565b9050919050565b60006040820190506124696000830185611b5f565b6124766020830184611936565b9392505050565b7f42656e6566696369617279206e6f742065786973746564000000000000000000600082015250565b60006124b3601783611d88565b91506124be8261247d565b602082019050919050565b600060208201905081810360008301526124e2816124a6565b9050919050565b6124f281611b89565b81146124fd57600080fd5b50565b60008151905061250f816124e9565b92915050565b60006020828403121561252b5761252a611897565b5b600061253984828501612500565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061259e602a83611d88565b91506125a982612542565b604082019050919050565b600060208201905081810360008301526125cd81612591565b9050919050565b60006040820190506125e96000830185611936565b6125f66020830184611936565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612659602683611d88565b9150612664826125fd565b604082019050919050565b600060208201905081810360008301526126888161264c565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c5601d83611d88565b91506126d08261268f565b602082019050919050565b600060208201905081810360008301526126f4816126b8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561272f578082015181840152602081019050612714565b8381111561273e576000848401525b50505050565b600061274f826126fb565b6127598185612706565b9350612769818560208601612711565b80840191505092915050565b60006127818284612744565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006127b38261278c565b6127bd8185611d88565b93506127cd818560208601612711565b6127d681612797565b840191505092915050565b600060208201905081810360008301526127fb81846127a8565b90509291505056fea264697066735822122008ce78e52796e40bae58d68d7a71551384f9af57232494b1ae794cd49585020c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063b4d6abbf116100a2578063e2177df811610071578063e2177df8146102c3578063f2fde38b146102df578063f74bc9d6146102fb578063f83d08ba14610317578063fc0c546a1461032157610116565b8063b4d6abbf1461020f578063c884ef831461023f578063cf3090121461026f578063d3e894831461028d57610116565b8063534b01c6116100e9578063534b01c61461017d5780635f1fa8c0146101ad578063715018a6146101dd57806386d1a69f146101e75780638da5cb5b146101f157610116565b8063015677391461011b5780633ccfd60b1461014d5780634a997eeb146101575780634e71d92d14610173575b600080fd5b610135600480360381019061013091906118ff565b61033f565b60405161014493929190611945565b60405180910390f35b610155610369565b005b610171600480360381019061016c9190611a37565b6104dc565b005b61017b61067e565b005b610197600480360381019061019291906118ff565b6106e4565b6040516101a49190611aeb565b60405180910390f35b6101c760048036038101906101c29190611b32565b610730565b6040516101d49190611b6e565b60405180910390f35b6101e561076f565b005b6101ef6107f7565b005b6101f9610934565b6040516102069190611b6e565b60405180910390f35b610229600480360381019061022491906118ff565b61095d565b6040516102369190611aeb565b60405180910390f35b610259600480360381019061025491906118ff565b610b3c565b6040516102669190611aeb565b60405180910390f35b610277610b88565b6040516102849190611ba4565b60405180910390f35b6102a760048036038101906102a29190611b32565b610b9b565b6040516102ba9796959493929190611bbf565b60405180910390f35b6102dd60048036038101906102d89190611c2e565b610bed565b005b6102f960048036038101906102f491906118ff565b610e2a565b005b61031560048036038101906103109190611cbb565b610f21565b005b61031f61120e565b005b6103296112f7565b6040516103369190611d6d565b60405180910390f35b60056020528060005260406000206000915090508060000154908060010154908060020154905083565b61037161131d565b73ffffffffffffffffffffffffffffffffffffffff1661038f610934565b73ffffffffffffffffffffffffffffffffffffffff16146103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc90611de5565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104429190611b6e565b602060405180830381865afa15801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190611e1a565b90506104d961049061131d565b82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113259092919063ffffffff16565b50565b6104e461131d565b73ffffffffffffffffffffffffffffffffffffffff16610502610934565b73ffffffffffffffffffffffffffffffffffffffff1614610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054f90611de5565b60405180910390fd5b600260149054906101000a900460ff16156105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90611e93565b60405180910390fd5b8383905086869050146105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e790611eff565b60405180910390fd5b60005b868690508110156106755761066287878381811061061457610613611f1f565b5b905060200201602081019061062991906118ff565b86868481811061063c5761063b611f1f565b5b9050602002013585858581811061065657610655611f1f565b5b90506020020135610f21565b808061066d90611f7d565b9150506105f3565b50505050505050565b6002600154036106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90612011565b60405180910390fd5b60026001819055506106db6106d661131d565b6113ab565b60018081905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6004818154811061074057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61077761131d565b73ffffffffffffffffffffffffffffffffffffffff16610795610934565b73ffffffffffffffffffffffffffffffffffffffff16146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290611de5565b60405180910390fd5b6107f560006114b4565b565b60026001540361083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390612011565b60405180910390fd5b600260018190555061084c61131d565b73ffffffffffffffffffffffffffffffffffffffff1661086a610934565b73ffffffffffffffffffffffffffffffffffffffff16146108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790611de5565b60405180910390fd5b60005b60048054905081101561092a57610917600482815481106108e7576108e6611f1f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113ab565b808061092290611f7d565b9150506108c3565b5060018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600060038260400151815481106109e4576109e3611f1f565b5b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816020015182600001518460000151610a609190612031565b610a6a91906120ba565b90508160400151421115610a87578084610a8491906120eb565b93505b816080015142108015610a9d5750816060015142115b15610b0e57600060018360a00151846060015142610abb9190612141565b610ac591906120ba565b610acf91906120eb565b90508260c00151828560000151610ae69190612141565b82610af19190612031565b610afb91906120ba565b85610b0691906120eb565b945050610b22565b81608001514210610b2157826000015193505b5b826020015184610b329190612141565b9350505050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600260149054906101000a900460ff1681565b60038181548110610bab57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b610bf561131d565b73ffffffffffffffffffffffffffffffffffffffff16610c13610934565b73ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6090611de5565b60405180910390fd5b600260149054906101000a900460ff1615610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611e93565b60405180910390fd5b6000818484610cc89190612141565b610cd29190612175565b14610d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d09906121f2565b60405180910390fd5b838311610d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4b9061225e565b60405180910390fd5b60006001828585610d659190612141565b610d6f91906120ba565b610d7991906120eb565b905060036040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001838152509080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505050505050505050565b610e3261131d565b73ffffffffffffffffffffffffffffffffffffffff16610e50610934565b73ffffffffffffffffffffffffffffffffffffffff1614610ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9d90611de5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906122f0565b60405180910390fd5b610f1e816114b4565b50565b610f2961131d565b73ffffffffffffffffffffffffffffffffffffffff16610f47610934565b73ffffffffffffffffffffffffffffffffffffffff1614610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490611de5565b60405180910390fd5b600260149054906101000a900460ff1615610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe490611e93565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361105d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110549061235c565b60405180910390fd5b60038054905082106110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906123c8565b60405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112090612434565b60405180910390fd5b60405180606001604052808481526020016000815260200183815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506004849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61121661131d565b73ffffffffffffffffffffffffffffffffffffffff16611234610934565b73ffffffffffffffffffffffffffffffffffffffff161461128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128190611de5565b60405180910390fd5b600260149054906101000a900460ff16156112da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d190611e93565b60405180910390fd5b6001600260146101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6113a68363a9059cbb60e01b8484604051602401611344929190612454565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611578565b505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403611430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611427906124c9565b60405180910390fd5b600061143b8261095d565b90506000810361144b57506114b1565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461149d91906120eb565b925050819055506114af82428361163f565b505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006115da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116e19092919063ffffffff16565b905060008151111561163a57808060200190518101906115fa9190612515565b611639576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611630906125b4565b60405180910390fd5b5b505050565b61168c8382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113259092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f82e416ba72d10e709b5de7ac16f5f49ff1d94f22d55bf582d353d3c313a1e8dd83836040516116d49291906125d4565b60405180910390a2505050565b60606116f084846000856116f9565b90509392505050565b60608247101561173e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117359061266f565b60405180910390fd5b6117478561180d565b611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d906126db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117af9190612775565b60006040518083038185875af1925050503d80600081146117ec576040519150601f19603f3d011682016040523d82523d6000602084013e6117f1565b606091505b5091509150611801828286611830565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561184057829050611890565b6000835111156118535782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188791906127e1565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118cc826118a1565b9050919050565b6118dc816118c1565b81146118e757600080fd5b50565b6000813590506118f9816118d3565b92915050565b60006020828403121561191557611914611897565b5b6000611923848285016118ea565b91505092915050565b6000819050919050565b61193f8161192c565b82525050565b600060608201905061195a6000830186611936565b6119676020830185611936565b6119746040830184611936565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119a1576119a061197c565b5b8235905067ffffffffffffffff8111156119be576119bd611981565b5b6020830191508360208202830111156119da576119d9611986565b5b9250929050565b60008083601f8401126119f7576119f661197c565b5b8235905067ffffffffffffffff811115611a1457611a13611981565b5b602083019150836020820283011115611a3057611a2f611986565b5b9250929050565b60008060008060008060608789031215611a5457611a53611897565b5b600087013567ffffffffffffffff811115611a7257611a7161189c565b5b611a7e89828a0161198b565b9650965050602087013567ffffffffffffffff811115611aa157611aa061189c565b5b611aad89828a016119e1565b9450945050604087013567ffffffffffffffff811115611ad057611acf61189c565b5b611adc89828a016119e1565b92509250509295509295509295565b6000602082019050611b006000830184611936565b92915050565b611b0f8161192c565b8114611b1a57600080fd5b50565b600081359050611b2c81611b06565b92915050565b600060208284031215611b4857611b47611897565b5b6000611b5684828501611b1d565b91505092915050565b611b68816118c1565b82525050565b6000602082019050611b836000830184611b5f565b92915050565b60008115159050919050565b611b9e81611b89565b82525050565b6000602082019050611bb96000830184611b95565b92915050565b600060e082019050611bd4600083018a611936565b611be16020830189611936565b611bee6040830188611936565b611bfb6060830187611936565b611c086080830186611936565b611c1560a0830185611936565b611c2260c0830184611936565b98975050505050505050565b60008060008060008060c08789031215611c4b57611c4a611897565b5b6000611c5989828a01611b1d565b9650506020611c6a89828a01611b1d565b9550506040611c7b89828a01611b1d565b9450506060611c8c89828a01611b1d565b9350506080611c9d89828a01611b1d565b92505060a0611cae89828a01611b1d565b9150509295509295509295565b600080600060608486031215611cd457611cd3611897565b5b6000611ce2868287016118ea565b9350506020611cf386828701611b1d565b9250506040611d0486828701611b1d565b9150509250925092565b6000819050919050565b6000611d33611d2e611d29846118a1565b611d0e565b6118a1565b9050919050565b6000611d4582611d18565b9050919050565b6000611d5782611d3a565b9050919050565b611d6781611d4c565b82525050565b6000602082019050611d826000830184611d5e565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611dcf602083611d88565b9150611dda82611d99565b602082019050919050565b60006020820190508181036000830152611dfe81611dc2565b9050919050565b600081519050611e1481611b06565b92915050565b600060208284031215611e3057611e2f611897565b5b6000611e3e84828501611e05565b91505092915050565b7f4c6f636b656420616c7265616479000000000000000000000000000000000000600082015250565b6000611e7d600e83611d88565b9150611e8882611e47565b602082019050919050565b60006020820190508181036000830152611eac81611e70565b9050919050565b7f496e76616c6964206172726179206c656e677468000000000000000000000000600082015250565b6000611ee9601483611d88565b9150611ef482611eb3565b602082019050919050565b60006020820190508181036000830152611f1881611edc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f888261192c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611fba57611fb9611f4e565b5b600182019050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611ffb601f83611d88565b915061200682611fc5565b602082019050919050565b6000602082019050818103600083015261202a81611fee565b9050919050565b600061203c8261192c565b91506120478361192c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120805761207f611f4e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120c58261192c565b91506120d08361192c565b9250826120e0576120df61208b565b5b828204905092915050565b60006120f68261192c565b91506121018361192c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561213657612135611f4e565b5b828201905092915050565b600061214c8261192c565b91506121578361192c565b92508282101561216a57612169611f4e565b5b828203905092915050565b60006121808261192c565b915061218b8361192c565b92508261219b5761219a61208b565b5b828206905092915050565b7f56657374696e672074696d656c696e6520696e76616c69640000000000000000600082015250565b60006121dc601883611d88565b91506121e7826121a6565b602082019050919050565b6000602082019050818103600083015261220b816121cf565b9050919050565b7f56657374696e67206d7573742073746172742061667465722054474500000000600082015250565b6000612248601c83611d88565b915061225382612212565b602082019050919050565b600060208201905081810360008301526122778161223b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122da602683611d88565b91506122e58261227e565b604082019050919050565b60006020820190508181036000830152612309816122cd565b9050919050565b7f41646472657373206d757374206e6f74206265207a65726f0000000000000000600082015250565b6000612346601883611d88565b915061235182612310565b602082019050919050565b6000602082019050818103600083015261237581612339565b9050919050565b7f506f6c696379206e6f7420657869737465640000000000000000000000000000600082015250565b60006123b2601283611d88565b91506123bd8261237c565b602082019050919050565b600060208201905081810360008301526123e1816123a5565b9050919050565b7f416c726561647920616464656400000000000000000000000000000000000000600082015250565b600061241e600d83611d88565b9150612429826123e8565b602082019050919050565b6000602082019050818103600083015261244d81612411565b9050919050565b60006040820190506124696000830185611b5f565b6124766020830184611936565b9392505050565b7f42656e6566696369617279206e6f742065786973746564000000000000000000600082015250565b60006124b3601783611d88565b91506124be8261247d565b602082019050919050565b600060208201905081810360008301526124e2816124a6565b9050919050565b6124f281611b89565b81146124fd57600080fd5b50565b60008151905061250f816124e9565b92915050565b60006020828403121561252b5761252a611897565b5b600061253984828501612500565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061259e602a83611d88565b91506125a982612542565b604082019050919050565b600060208201905081810360008301526125cd81612591565b9050919050565b60006040820190506125e96000830185611936565b6125f66020830184611936565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612659602683611d88565b9150612664826125fd565b604082019050919050565b600060208201905081810360008301526126888161264c565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c5601d83611d88565b91506126d08261268f565b602082019050919050565b600060208201905081810360008301526126f4816126b8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561272f578082015181840152602081019050612714565b8381111561273e576000848401525b50505050565b600061274f826126fb565b6127598185612706565b9350612769818560208601612711565b80840191505092915050565b60006127818284612744565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006127b38261278c565b6127bd8185611d88565b93506127cd818560208601612711565b6127d681612797565b840191505092915050565b600060208201905081810360008301526127fb81846127a8565b90509291505056fea264697066735822122008ce78e52796e40bae58d68d7a71551384f9af57232494b1ae794cd49585020c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBeneficiaries(address[],uint256[],uint256[])": {
        "details": "Caller must be Owner Not allow Owner to alter the vesting policy",
        "params": {
          "_beneficiaries": "all `_beneficiaries` address",
          "_totalAmt": "Amount that corresponding `_beneficiary` can claim in total "
        }
      },
      "addBeneficiary(address,uint256,uint256)": {
        "details": "Caller must be Owner Not allow Owner to alter the vesting policy",
        "params": {
          "_beneficiary": "`_beneficiary` address",
          "_policy": "index of the correspond policy for beneficiary",
          "_totalAmt": "Amount that `_beneficiary` can claim in total"
        }
      },
      "claim()": {
        "details": "Caller can be any Note:  - Only Beneficiaries, who were added into the list, are able to claim tokens - If `_policy`, that binds to msg.sender, is not found -> revert - Previously unclaimed amounts will be accumulated"
      },
      "getAvailAmt(address)": {
        "details": "Caller can be ANY"
      },
      "lock()": {
        "details": "Caller must be Owner Note: - Set value of `locked` to `true` - When `locked = true`, setVesting() will be locked and additional vesting policies can't be added - No method to unlock this state"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release()": {
        "details": "Caller can be owner only"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPolicy(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_TGEdenom": "denominator of `_TGEratio`",
          "_TGEratio": "amount to release on TGE in `_TGEdenom` of total allocated",
          "_TGEtime": "moment of TGE",
          "_period": "duration of an vesting period",
          "_vestingEnd": "last of vesting time, return last vesting on this timestamp",
          "_vestingStart": "moment of vesting duration start"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Caller can be owner only"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBeneficiaries(address[],uint256[],uint256[])": {
        "notice": "add multiple beneficiaries"
      },
      "addBeneficiary(address,uint256,uint256)": {
        "notice": "add beneficiary"
      },
      "claim()": {
        "notice": "Beneficiaries use this method to claim vesting tokens"
      },
      "getAvailAmt(address)": {
        "notice": "Query available amount that `_beneficiary` is able to claim at the moment"
      },
      "lock()": {
        "notice": "Enable the lock state of setting"
      },
      "release()": {
        "notice": "Owner call this to realease token to all beneficiaries"
      },
      "setPolicy(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Set policy and vesting timeline"
      },
      "withdraw()": {
        "notice": "Owner call this to withdraw all vesting token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1842,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)902"
      },
      {
        "astId": 1844,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "locked",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1848,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "policies",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(PoolPolicy)1832_storage)dyn_storage"
      },
      {
        "astId": 1851,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "beneficiariesList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1856,
        "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
        "label": "beneficiaries",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Beneficiary)1839_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolPolicy)1832_storage)dyn_storage": {
        "base": "t_struct(PoolPolicy)1832_storage",
        "encoding": "dynamic_array",
        "label": "struct PeriodicVesting.PoolPolicy[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)902": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Beneficiary)1839_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PeriodicVesting.Beneficiary)",
        "numberOfBytes": "32",
        "value": "t_struct(Beneficiary)1839_storage"
      },
      "t_struct(Beneficiary)1839_storage": {
        "encoding": "inplace",
        "label": "struct PeriodicVesting.Beneficiary",
        "members": [
          {
            "astId": 1834,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "allocated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1836,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "claimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1838,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "policy",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolPolicy)1832_storage": {
        "encoding": "inplace",
        "label": "struct PeriodicVesting.PoolPolicy",
        "members": [
          {
            "astId": 1819,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "TGEratio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "TGEdenom",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1823,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "TGEtime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1825,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "vestingStart",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1827,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "vestingEnd",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1829,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "period",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1831,
            "contract": "contracts/PeriodicVesting.sol:PeriodicVesting",
            "label": "totalPeriodNum",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}